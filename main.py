import telebot
import sqlite3
import re
from telebot import types
import random
import pandas as pd
import pytz
from datetime import datetime
import time
from multiprocessing import *
from functools import wraps
import math


token = ''
bot = telebt.TeleBot(token)
password = '123'
sum_users = 0
url_pattern = r"https://\S+"

def save_stats_in_table():
  db =sqlite3.connect('db.sql')
  query = f'SELECT * FROM Users_links'
  df = pd.read_sql_query(query, db)
  db.close()
  output_excel_file = 'stats.xlsx'
  df.to_excel(output_excel_file, index=False, engine='openpyxl')

  file = open('stats.xlsx','rb')
  bot.send_document(158079043, file)

def save_users_in_table():
  db =sqlite3.connect('db.sql')
  query = f'SELECT * FROM users'
  df = pd.read_sql_query(query, db)
  db.close()
  output_excel_file = 'users.xlsx'
  df.to_excel(output_excel_file, index=False, engine='openpyxl')

  file = open('users.xlsx','rb')
  bot.send_document(158079043, file)


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–∞—Ä–∞—Ñ–æ–Ω–∞
def database():
   db = sqlite3.connect('db.sql')
   cur = db.cursor()
   # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   # id - –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ [int auto_increment primary key]
   # name - –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
   # link - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤ 
   cur.execute('CREATE TABLE if NOT EXISTS users(id_user varchar(30), name varchar(50), company varchar(100), type varchar(100), link varchar(256), reg_datetime varchar(50))')
   db.execute(f'CREATE table if not EXISTS Users_links (id_user, name, link, stream, wait, successfully)')
   db.commit()
   db.close()
database()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
def add_user(id_user, user):
  strip = user.strip()
  arr = strip.split(',')
  name_user = arr[0]
  company_user = arr[1]
  type_company_user = arr[2]
  link_user = arr[3]
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
  current_time_krasnoyarsk = datetime.now(krasnoyarsk_tz)
  current_time_str = current_time_krasnoyarsk.strftime('%Y-%m-%d %H:%M:%S')
  cur.execute("INSERT INTO users(id_user, name, company, type, link, reg_datetime) VALUES (?, ?, ?, ?, ?, ?)", (id_user, name_user, company_user, type_company_user, link_user, current_time_str))
  db.commit()
  db.close()

def check_table():
  # db = sqlite3.connect('db.sql')
  # cur = db.cursor()
  # cur.execute("CREATE TABLE if NOT EXISTS check(id_user integer, name text, link text)")
  # cur.execute("INSERT into check (id_user, name, link) SELECT")
  pass

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=['start'])
def start(message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  button_1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
  markup.add(button_1)
  bot.send_message(message.chat.id, 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '+ message.from_user.first_name +', —è –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞ –æ—Ç–∑—ã–≤–æ–≤.', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞ 
@bot.message_handler(content_types=['text'])
def func(message):
  if message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
    markup = types.ReplyKeyboardRemove()
    input_pass = bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É.', reply_markup=markup)
    bot.register_next_step_handler(input_pass, verification)
  elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–≤—É–∫ –æ—Ç –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã. –í —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–∏—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.'
                     + "\n\n" + '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è,–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏,–í–∏–¥_–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,[—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏]'
                     + "\n" + '–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π‚ùóÔ∏è'
                     + "\n\n" + '–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è:')
    reg = bot.send_message(message.chat.id, '–ò–≤–∞–Ω,–Ø–Ω–¥–µ–∫—Å,–†–µ–∫–ª–∞–º–∞ –∏ IT —É—Å–ª—É–≥–∏,https://yandex.ru/profile/93247744409'
                           + "\n" + '–∏–ª–∏'
                           + "\n" + '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä,–ü–µ—Ä—Ü—ã,–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤,https://go.2gis.com/mqrfv', reply_markup=markup)
    bot.register_next_step_handler(reg, validation_form)
  elif message.text == "/startmarathon":
    if message.from_user.id == 158079043:
      startmarathon()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/startspam":
    if message.from_user.id == 158079043:
      start_engine()
      bot.send_message(158079043, '–ù–∞—á–∞–ª–∞—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—â–µ–Ω–∏–π')
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/cleardb":
    if message.from_user.id == 158079043:
      cleardb()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/checkstats":
    if message.from_user.id == 158079043:
      save_stats_in_table() 
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/stopspam":
    if message.from_user.id == 158079043:
      stopspam()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/givemeusers":
    if message.from_user.id == 158079043:
      save_users_in_table()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif re.search(url_pattern, message.text):
    delete_from_wait(message.chat.id, message.text)
  else:
    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :('
                     + "\n\n" + '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @ahydrogen')

def delete_from_wait(id_user,url_del):
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute("SELECT wait FROM Users_links WHERE id_user = ?", (id_user,))
  wait_str = cur.fetchone()[0]
  new_wait_str = wait_str.replace(url_del+'|', '')
  cur.execute("UPDATE Users_links SET wait = ? WHERE id_user = ?", (new_wait_str, id_user))

  krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
  current_time_krasnoyarsk = datetime.now(krasnoyarsk_tz)
  current_time_str = current_time_krasnoyarsk.strftime('%Y-%m-%d %H:%M:%S')
  cur.execute("SELECT successfully FROM Users_links WHERE id_user = ?", (id_user,))
  successfully_str = cur.fetchone()[0]
  successfully_str = successfully_str+str(url_del)+' '+'['+current_time_str+']'+'|'
  cur.execute("UPDATE Users_links SET successfully = ? WHERE id_user = ?", (successfully_str, id_user))
  db.commit()
  db.close()
  bot.send_message(id_user, '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π üòâ')

def stopspam():
  global stop_flag
  stop_flag = True
  bot.send_message(158079043, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

def stopmarathon():
  pass #–Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –º–∞—Ä–∞—Ñ–æ–Ω–∞
  
# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
def verification(message):
  if message.text == password:
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      button_2 = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
      markup.add(button_2)
      bot.send_message(message.chat.id, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ. –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=markup)
  else:
      wrong_pass = bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
      bot.register_next_step_handler(wrong_pass, verification)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–º—è –§–∞–º–∏–ª–∏—è —Å—Å—ã–ª–∫–∞
def validation_form(message):
  pattern = r'^[–ê-–Ø–Å–∞-—è—ëa-zA-Z]+,[–ê-–Ø–Å–∞-—è—ëa-zA-Z0-9]+,[^,]+,(https?://[^\s,]+)$'
  if re.match(pattern, message.text):
    bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞.')
    add_user(message.from_user.id, message.text)
  else:
    wrong_reg = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ —à–∞–±–ª–æ–Ω—É.')
    bot.register_next_step_handler(wrong_reg, validation_form)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞
def startmarathon():
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute('SELECT id_user FROM users')
  arr = cur.fetchall()
  matrix()
  for i in range(len(arr)):
    bot.send_message(int(arr[i][0]), '–ú–∞—Ä–∞—Ñ–æ–Ω –Ω–∞—á–∞–ª—Å—è!')
  db.close()
  

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def matrix():
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute('SELECT link FROM users')
  link = cur.fetchall()
  links = []

  
  for i in range(len(link)):
     links.append(link[i][0])
  links.reverse()
  
  cur.execute('SELECT * FROM users') 
  users = cur.fetchall()

  matrixx = pd.DataFrame(columns=['id_user', 'name', 'company', 'type', 'link', 'stream', 'wait', 'successfully'])
  for i in range(len(users)):
      
      random.shuffle(links)
      stream = ' '.join(links)
      stream = str(stream)
      #print(stream)
      stream = stream.replace(users[i][4], " ")

      

      
      if stream[-1] == ' ':
        stream_inp = stream[:-1]
        list = [users[i][0], users[i][1], users[i][2], users[i][3], users[i][4], stream_inp, "|", "|"]
        matrixx.loc[len(matrixx)] = list
      else:
        list = [users[i][0], users[i][1], users[i][2], users[i][3], users[i][4], stream, "|", "|"]
        matrixx.loc[len(matrixx)] = list
      # print('-------------')
      # print(stream)
  db.execute(f'CREATE table if not EXISTS Users_links (id_user, name, company, type, link, stream, wait, successfully)')
  matrixx.to_sql('Users_links', db, if_exists='replace')
  db.commit()
  #print(matrix)
  
  db.close()


def spam():
  
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute('SELECT id_user FROM users')
  ids = cur.fetchall()
  id_arr = []
  for i in range(len(ids)):
     id_arr.append(ids[i][0])

  for id in id_arr:

    db = sqlite3.connect('db.sql')
    cur = db.cursor()
    query = "SELECT stream FROM Users_links WHERE id_user = ?"
    cur.execute(query, (id,))
    result = cur.fetchone()

    result = result[0].split(" ")
    
    try:
      while True:
        result.remove("")
    except ValueError:
        pass  
          
    if len(result) > 0:
      bot.send_message(id, 'üì£ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: ' + result[-1])

      # krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
      # current_time_krasnoyarsk = datetime.now(krasnoyarsk_tz)
      # current_time_str = current_time_krasnoyarsk.strftime('%Y-%m-%d %H:%M:%S')

      query = "SELECT wait from Users_links WHERE id_user = ?"
      cur.execute(query, (id,))
      wait_queue = cur.fetchone()
      wait_queue = wait_queue[0]+str(result[-1])+'|'
      
      cur.execute("UPDATE Users_links SET wait = ? WHERE id_user = ?", (wait_queue, id))

      bot.send_message(id, '‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ –æ—Ç–≤–µ—Ç –±–æ—Ç—É —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ.')
      
      result.pop(-1)
      out = ' '.join(result)
      # out –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ stream
      query = "UPDATE Users_links SET stream = ? WHERE id_user = ?"
      cur.execute(query, (out, id))
      db.commit()
      db.close()
      time.sleep(round(math.random(32400,43200)/len(id_arr)))
    else:
      bot.send_message(158079043, '–ú–∞—Ä–∞—Ñ–æ–Ω –∑–∞–∫–æ–Ω—á–µ–Ω, –≤—ã–∫–ª—é—á–∏ –µ–≥–æ')
      time.sleep(10) 
    db.close()
# bot_messages = {}
# def spam():
#     db = sqlite3.connect('db.sql')
#     cur = db.cursor()
#     cur.execute('SELECT id_user FROM users')
#     ids = cur.fetchall()
#     id_arr = [row[0] for row in ids]

#     for id in id_arr:
#         db = sqlite3.connect('db.sql')
#         cur = db.cursor()
#         query = "SELECT stream FROM Users_links WHERE id_user = ?"
#         cur.execute(query, (id,))
#         result = cur.fetchone()

#         result = result[0].split(" ")

#         try:
#             while True:
#                 result.remove("")
#         except ValueError:
#             pass

#         if len(result) > 0:
#             link_message = 'üì£ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: ' + result[-1]
#             bot.send_message(id, link_message)

#             krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
#             current_time_krasnoyarsk = datetime.now(krasnoyarsk_tz)
#             current_time_str = current_time_krasnoyarsk.strftime('%Y-%m-%d %H:%M:%S')

#             query = "SELECT wait from Users_links WHERE id_user = ?"
#             cur.execute(query, (id,))
#             wait_queue = cur.fetchone()
#             wait_queue = wait_queue[0] + str(result[-1]) + '[' + current_time_str + ']' + '|'

#             cur.execute("UPDATE Users_links SET wait = ? WHERE id_user = ?", (wait_queue, id))

#             # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
#             bot_messages[id] = '‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ.'

#             # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
#             inline_keyboard = types.InlineKeyboardMarkup()
#             button = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ', callback_data=str(id))
#             inline_keyboard.add(button)
#             bot.send_message(id, bot_messages[id], reply_markup=inline_keyboard)

#             result.pop(-1)
#             out = ' '.join(result)
#             # out –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ stream
#             query = "UPDATE Users_links SET stream = ? WHERE id_user = ?"
#             cur.execute(query, (out, id))
#             db.commit()
#             db.close()
#             time.sleep(30/len(id_arr))
#         else:
#             bot.send_message(158079043, '–ú–∞—Ä–∞—Ñ–æ–Ω –∑–∞–∫–æ–Ω—á–µ–Ω')
#             time.sleep(10)
#         db.close()

# @bot.callback_query_handler(func=lambda call: call.data.isdigit())
# def handle_button_click(call):
#     user_id = int(call.data)
#     if user_id in bot_messages:
#         bot.send_message(user_id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É!")
#         print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞: {}".format(user_id, bot_messages[user_id]))
#         del bot_messages[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞


# –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
def mult_threading(func):
  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
  @wraps(func)
  def wrapper(*args_, **kwargs_):
    import threading
    func_thread = threading.Thread(target=func,
                                   args=tuple(args_),
                                   kwargs=kwargs_)
    func_thread.start()
    return func_thread
  return wrapper

@mult_threading
def start_engine():
  global stop_flag
  stop_flag = False
  # db = sqlite3.connect('db.sql')
  # cur = db.cursor()
  # cur.execute('SELECT id_user FROM users')
  # ids = cur.fetchall()
  # id_arr = []
  # for i in range(len(ids)):
  #    id_arr.append(ids[i][0])
  # counter = len(id_arr)

  while not stop_flag:
    tz = pytz.timezone('Asia/Krasnoyarsk')
    Krasnoyarsk_hour = datetime.now(tz).hour

    if (Krasnoyarsk_hour >= 8) and (Krasnoyarsk_hour <= 20):
        spam()
    else:
      time.sleep(60)

def cleardb():
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute("DELETE FROM users")
  cur.execute("DELETE FROM Users_links")
  db.commit()
  db.close()
  bot.send_message(158079043, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—á–∏—â–µ–Ω–∞')

if __name__ == '__main__':
  bot.polling(none_stop=True)