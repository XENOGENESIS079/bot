import telebot
import sqlite3
import re
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import pandas as pd
import pytz
from datetime import datetime, timedelta
import time
from multiprocessing import *
from functools import wraps
import threading
import atexit

# def exit_handler():
#     # –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
#     bot.send_message(158079043, '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è')
# atexit.register(exit_handler)


token = '6724776824:AAElnolJgOrq6IU8_c3vJc2aSBwMhwgElcM'
bot = telebot.TeleBot(token)
password = 'abakan2023'
registration_data = {}

bot.send_message(158079043, '–ë–æ—Ç –≤–∫–ª—é—á–∏–ª—Å—è')

"""–°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•"""
# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–∞—Ä–∞—Ñ–æ–Ω–∞
def database():
   db = sqlite3.connect('db.sql')
   cur = db.cursor()
   # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   # id - –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ [int auto_increment primary key]
   # name - –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
   # link - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤ 
   cur.execute('''CREATE TABLE if NOT EXISTS users (id_user varchar(30), 
                                                    name varchar(50), 
                                                    company varchar(100), 
                                                    type varchar(100), 
                                                    link_1 varchar(256), 
                                                    link_2 varchar(256), 
                                                    reg_datetime varchar(50))''')
   db.execute(f'''CREATE table if not EXISTS Users_links (id_user, 
                                                          name, 
                                                          link, 
                                                          stream, 
                                                          wait, 
                                                          successfully)''')
   cur.execute('''CREATE TABLE IF NOT EXISTS ProcessingState (
               id INTEGER PRIMARY KEY,
               current_user_id TEXT
               )''')
   db.commit()
   db.close()
database()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
def add_user(id_user, user):
  strip = user.strip()
  arr = strip.split(',')
  name_user = arr[0]
  company_user = arr[1]
  type_company_user = arr[2]
  link_user = arr[3]
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
  current_time_krasnoyarsk = datetime.now(krasnoyarsk_tz)
  current_time_str = current_time_krasnoyarsk.strftime('%Y-%m-%d %H:%M:%S')
  cur.execute("INSERT INTO users(id_user, name, company, type, link, reg_datetime) VALUES (?, ?, ?, ?, ?, ?)", (id_user, name_user, company_user, type_company_user, link_user, current_time_str))
  db.commit()
  db.close()
"""–°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•"""



# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=['start'])
def start(message):
  #markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  #button_1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
  #markup.add(button_1)
  input_pass = bot.send_message(message.chat.id, 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '+ message.from_user.first_name +', —è –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Ä–∞—Ñ–æ–Ω–∞ –æ—Ç–∑—ã–≤–æ–≤.' + 
                   '\n\n' + '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏.')
  if message.chat.id == 158079043:
      bot.send_message(158079043, '–ü—Ä–∏–≤–µ—Ç, —É–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã :)')
  else:
      bot.register_next_step_handler(input_pass, verification)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞ 
@bot.message_handler(content_types=['text'])
def func(message):
  if message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
    # markup = types.ReplyKeyboardRemove()
    # input_pass = bot.send_message(message.chat.id, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É.', reply_markup=markup)
    # bot.register_next_step_handler(input_pass, verification)
    pass
  elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
    # registration(message)
    pass
  elif message.text == "/startmarathon":
    if message.from_user.id == 158079043:
      startmarathon()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/startspam":
    if message.from_user.id == 158079043:
      start_engine()
      bot.send_message(158079043, '<code>[–ù–∞—á–∞–ª–∞—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—â–µ–Ω–∏–π]</code>')
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/cleardb":
    if message.from_user.id == 158079043:
      cleardb()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/checkstats":
    if message.from_user.id == 158079043:
      save_stats_in_table() 
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/stopspam":
    if message.from_user.id == 158079043:
      stopspam()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/givemeusers":
    if message.from_user.id == 158079043:
      save_users_in_table()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  elif message.text == "/first_cycle":
    if message.from_user.id == 158079043:
      first_cycle()
    else:
      bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.')
  else:
    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :('
                     + "\n\n" + '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @ahydrogen')



"""–ö–û–ú–ê–ù–î–´ –î–õ–Ø –ú–ï–ù–Ø"""
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞
def startmarathon():
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute('SELECT id_user FROM users')
  arr = cur.fetchall()
  matrix()
  for i in range(len(arr)):
    bot.send_message(int(arr[i][0]), '–ú–∞—Ä–∞—Ñ–æ–Ω –Ω–∞—á–∞–ª—Å—è!')
  db.close()

# –û—á–∏—Å—Ç–∏—Ç—å –ë–î
def cleardb():
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute("DELETE FROM users")
  cur.execute("DELETE FROM Users_links")
  db.commit()
  db.close()
  bot.send_message(158079043, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞')

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º
def stopspam():
  global stop_flag
  stop_flag = True
  bot.send_message(158079043, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –º–∞—Ä–∞—Ñ–æ–Ω–∞
def stopmarathon():
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute('SELECT id_user FROM users')
  arr = cur.fetchall()
  db.close()
  for i in range(len(arr)):
    bot.send_message(int(arr[i][0]), '–ú–∞—Ä–∞—Ñ–æ–Ω –∑–∞–∫–æ–Ω—á–µ–Ω, –≤—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!')

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã users
def save_stats_in_table():
  db = sqlite3.connect('db.sql')
  query = f'SELECT * FROM Users_links'
  df = pd.read_sql_query(query, db)
  db.close()
  
  output_excel_file = 'stats.xlsx'
  df.to_excel(output_excel_file, index=False, engine='openpyxl')

  file = open('stats.xlsx','rb')
  bot.send_document(158079043, file)
  file = open('db.sql','rb')
  bot.send_document(158079043, file)

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã Users_links
def save_users_in_table():
  db = sqlite3.connect('db.sql')
  query = f'SELECT * FROM users'
  df = pd.read_sql_query(query, db)
  db.close()
  
  output_excel_file = 'users.xlsx'
  df.to_excel(output_excel_file, index=False, engine='openpyxl')

  file = open('users.xlsx','rb')
  bot.send_document(158079043, file)
"""–ö–û–ú–ê–ù–î–´ –î–õ–Ø –ú–ï–ù–Ø"""



"""–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""
# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
def verification(message):
  if message.text == password:
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
      button_2 = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
      markup.add(button_2)
      bot.send_message(message.chat.id, '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è üòÉ', reply_markup=markup)
      registration(message)
  else:
      wrong_pass = bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
      bot.register_next_step_handler(wrong_pass, verification)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def registration(message):
    markup = types.ReplyKeyboardRemove()
    chat_id = message.chat.id
    bot.send_message(chat_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–µ –∏–º—è:", reply_markup=markup)
    bot.register_next_step_handler(message, ask_name)

def ask_name(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    name = message.text
    registration_data[user_id] = {'name': name}
    bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    bot.register_next_step_handler(message, ask_company_name)

def ask_company_name(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    company_name = message.text
    registration_data[user_id]['company_name'] = company_name
    bot.send_message(chat_id, "–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ñ–µ—Ä—É –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    bot.register_next_step_handler(message, ask_company_field)

def ask_company_field(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    company_field = message.text
    registration_data[user_id]['company_field'] = company_field
    bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:"+
                     "\n" + 'https://yandex.ru/profile/239139382678')
    bot.register_next_step_handler(message, ask_first_company_link)

def ask_first_company_link(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    company_link = message.text
    registration_data[user_id]['company_link'] = company_link

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞
    registration_data[user_id]['first_link_received'] = True

    bot.send_message(chat_id, "–ó–∞–ø–∏—Å–∞–ª–∏ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤—Ç–æ—Ä—É—é —Å—Å—ã–ª–∫—É.")
    bot.register_next_step_handler(message, ask_second_company_link)

def ask_second_company_link(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if 'first_link_received' in registration_data[user_id] and registration_data[user_id]['first_link_received']:
        company_link_optional = message.text

        if company_link_optional.lower() == "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
            company_link_optional = None

        registration_data[user_id]['company_link_optional'] = company_link_optional

        krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
        current_time_krasnoyarsk = datetime.now(krasnoyarsk_tz)
        current_time_str = current_time_krasnoyarsk.strftime('%Y-%m-%d %H:%M:%S')

        user_data = registration_data[user_id]
        db = sqlite3.connect('db.sql')
        cur = db.cursor()
        cur.execute("INSERT INTO users (id_user, name, company, type, link_1, link_2, reg_datetime) VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (user_id, user_data['name'], user_data['company_name'], user_data['company_field'], user_data['company_link'], user_data.get('company_link_optional', None), current_time_str))
        db.commit()

        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –º–∞—Ä–∞—Ñ–æ–Ω–∞.")
        del registration_data[user_id]
    else:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É.")
"""–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""  



"""–ù–ê–ß–ê–õ–û –ú–ê–†–ê–§–û–ù–ê"""
# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def matrix():
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute("PRAGMA table_info(users)")
  columns = [column[1] for column in cur.fetchall()]
  if 'link_conc' not in columns:
      # –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ
      cur.execute('ALTER TABLE users ADD COLUMN link_conc TEXT')
  cur.execute("UPDATE users SET link_conc = '|' || link_1 || ' ' || link_2 || '|'")
  if 'stream' not in columns:
    cur.execute('ALTER TABLE users ADD COLUMN stream varchar(256)')
  cur.execute('UPDATE users SET stream = NULL')
  cur.execute('DELETE FROM Users_links')


  cur.execute('SELECT id_user FROM users')
  user_ids = [row[0] for row in cur.fetchall()]

  for user_id in user_ids:
      # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      other_user_ids = [uid for uid in user_ids if uid != user_id]
      
      # –ü–æ–ª—É—á–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è link_conc –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É
      stream_values = []
      for other_user_id in other_user_ids:
          cur.execute('SELECT link_conc FROM users WHERE id_user = ?', (other_user_id,))
          link_conc_value = cur.fetchone()[0]
          stream_values.append(link_conc_value)
      
      # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É stream –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä–µ–¥–∏–Ω—è—è –∑–Ω–∞—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      stream = '|'.join(stream_values)

      stream = stream.replace('|||', '|')
      
      # –û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ stream –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
      cur.execute('UPDATE users SET stream = ? WHERE id_user = ?', (stream, user_id))

  db.commit()
  db.close()
  randomize()
  perenos()

def randomize():
  import sqlite3

  def shift_elements_forward(stream_value, shift):
      stream_value = stream_value.strip('|')
      elements = stream_value.split('|')

      # –°–¥–≤–∏–≥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤–ø–µ—Ä–µ–¥
      shifted_elements = [elements[(i + shift) % len(elements)] for i in range(len(elements))]

      new_stream_value = '|'.join(shifted_elements)
      return new_stream_value

  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute("SELECT id_user, stream FROM users")
  user_streams = cur.fetchall()

  shift = 0 

  for user_id, stream_value in user_streams:
      new_stream_value = shift_elements_forward(stream_value, shift)

      # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ stream –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      cur.execute("UPDATE users SET stream = ? WHERE id_user = ?", (new_stream_value, user_id))
      db.commit()

      shift += 1

  db.close()

def perenos():
  import sqlite3


  db = sqlite3.connect('db.sql')
  cur = db.cursor()

  try:
      cur.execute("SELECT id_user, name, link_conc, stream FROM users")
      data_to_insert = cur.fetchall()

      for row in data_to_insert:
          id_user, name, link_conc, stream = row
          cur.execute("INSERT INTO Users_links (id_user, name, link, stream, wait, successfully) VALUES (?, ?, ?, ?, ?, ?)",
                      (id_user, name, link_conc, stream, "", ""))

      db.commit()
      print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'users' –≤ —Ç–∞–±–ª–∏—Ü—É 'Users_links'.")

  except sqlite3.Error as e:
      print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

  finally:
      db.close()
"""–ù–ê–ß–ê–õ–û –ú–ê–†–ê–§–û–ù–ê"""



"""–ü–ï–†–í–´–ô –¶–ò–ö–õ –°–ü–ê–ú–ê"""
def first_cycle():
    db = sqlite3.connect('db.sql')
    cur = db.cursor()
    cur.execute('SELECT id_user FROM users')
    ids = cur.fetchall()
    db.close()
    id_arr = [str(id[0]) for id in ids]
    # # –ü–æ–ª—É—á–∏—Ç—å id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # db = sqlite3.connect('db.sql')
    # cur = db.cursor()
    # cur.execute("SELECT current_user_id FROM ProcessingState")
    # current_user_id = cur.fetchone()
    # db.close()

    # # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ id_arr
    # if current_user_id:
    #     current_user_id = current_user_id[0]
    #     current_user_index = id_arr.index(current_user_id)
    # else:
    #     current_user_index = 0

    random.shuffle(id_arr)
    #print(id_arr)
    count = 0
    for id in id_arr:
        count += 1
        bot.send_message(158079043,'‚úÖ ' + str(count) + '–π –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '+'id['+str(id)+']')

        db = sqlite3.connect('db.sql')
        cur = db.cursor()
        cur.execute("SELECT wait FROM Users_links WHERE id_user = ?", (id,))
        wait = cur.fetchone()

        if wait and not wait[0]:
            cur.execute("SELECT stream FROM Users_links WHERE id_user = ?", (id,))
            result = cur.fetchone()

            if result and result[0] != "":
                result = result[0].split("|")
                # print(result)
                out = result[-1].split(" ")

                if len(result) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton('–û–¢–ó–´–í–´ –û–°–¢–ê–í–õ–ï–ù–´', callback_data=f"button_pressed_{id}")
                    keyboard.add(button)
                    # print(out)
                    bot.send_message(id, 'üì£üì£üì£üì£üì£üì£üì£üì£üì£' + '\n' + '–ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞: ' + '\n\n' + out[0] + '\n\n' + out[1] + '\n\n' + 
                                     '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ–±–∞ –æ—Ç–∑—ã–≤–∞.', reply_markup=keyboard)
                    
                    cur.execute("SELECT wait from Users_links WHERE id_user = ?", (id,))
                    wait_queue = cur.fetchone()
                    wait_queue = wait_queue[0] + str(out[0])+' '+str(out[1])
                    cur.execute("UPDATE Users_links SET wait = ? WHERE id_user = ?", (wait_queue, id))

                    # bot.send_message(id, '‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è ')
                    
                    
                    
                    
                    result.pop(-1)
                    
                        
                    result = '|'.join(result)

                    cur.execute("UPDATE Users_links SET stream = ? WHERE id_user = ?", (result, id))
                    db.commit()
                    time.sleep(5)
                else:
                    pass
                    # bot.send_message(id, '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –º–∞—Ä–∞—Ñ–æ–Ω, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ß—Ç–æ–±—ã —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å–≤–µ—Ä—Ö—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö :)')
            else:
                bot.send_message(158079043, '‚ùï ' + str(count) + '–π —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª –º–∞—Ä–∞—Ñ–æ–Ω '+'id['+str(id)+']')
                time.sleep(5)
                #pass
            db.close()
        else:
            bot.send_message(id, '–í—ã –ø—Ä–æ—Å–ø—É—Å—Ç–∏–ª–∏ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º –≤—ã—à–µ ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
            time.sleep(5)
    bot.send_message(158079043, '‚úÖ –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª —Å–ø–∞–º–∞ –æ–∫–æ–Ω—á–µ–Ω')

"""–ü–ï–†–í–´–ô –¶–ò–ö–õ –°–ü–ê–ú–ê"""



"""–°–ü–ê–ú –§–£–ù–ö–¶–ò–Ø"""
def spam():
    db = sqlite3.connect('db.sql')
    cur = db.cursor()
    cur.execute('SELECT id_user FROM users')
    ids = cur.fetchall()
    db.close()
    id_arr = [str(id[0]) for id in ids]

    current_time = datetime.now()
    target_time = current_time.replace(hour=20, minute=0, second=0, microsecond=0)
    if current_time >= target_time:
        target_time += timedelta(days=1)
    time_difference = target_time - current_time
    seconds_until_9pm = int(time_difference.total_seconds())

    # # –ü–æ–ª—É—á–∏—Ç—å id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # db = sqlite3.connect('db.sql')
    # cur = db.cursor()
    # cur.execute("SELECT current_user_id FROM ProcessingState")
    # current_user_id = cur.fetchone()
    # db.close()

    # # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ id_arr
    # if current_user_id:
    #     current_user_id = current_user_id[0]
    #     current_user_index = id_arr.index(current_user_id)
    # else:
    #     current_user_index = 0
    
    random.shuffle(id_arr)
    #print(id_arr)
    count = 0
    for id in id_arr:
        count += 1
        bot.send_message(158079043, '‚úÖ ' + str(count) + '–π –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '+'id['+str(id)+']')

        db = sqlite3.connect('db.sql')
        cur = db.cursor()
        cur.execute("SELECT wait FROM Users_links WHERE id_user = ?", (id,))
        wait = cur.fetchone()

        if wait and not wait[0]:
            cur.execute("SELECT stream FROM Users_links WHERE id_user = ?", (id,))
            result = cur.fetchone()

            if result and result[0] != "":
                result = result[0].split("|")
                out = result[-1].split(" ")

                if len(result) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton('–û–¢–ó–´–í–´ –û–°–¢–ê–í–õ–ï–ù–´', callback_data=f"button_pressed_{id}")
                    keyboard.add(button)
                    bot.send_message(id, 'üì£üì£üì£üì£üì£üì£üì£üì£üì£' + '\n' + '–ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞: ' + '\n\n' + out[0] + '\n\n' + out[1] + '\n\n' + 
                                     '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ–±–∞ –æ—Ç–∑—ã–≤–∞.', reply_markup=keyboard)

                    cur.execute("SELECT wait from Users_links WHERE id_user = ?", (id,))
                    wait_queue = cur.fetchone()
                    wait_queue = wait_queue[0] + str(out[0])+' '+str(out[1])
                    cur.execute("UPDATE Users_links SET wait = ? WHERE id_user = ?", (wait_queue, id))

                    # bot.send_message(id, '‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ–±–∞ –æ—Ç–∑—ã–≤–∞.')
                    


                    result.pop(-1)
                    result = '|'.join(result)

                    cur.execute("UPDATE Users_links SET stream = ? WHERE id_user = ?", (result, id))
                    db.commit()

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    ft = int((seconds_until_9pm - (seconds_until_9pm / 8)) / len(id_arr))
                    st = int(seconds_until_9pm / len(id_arr))
                    waiting = random.randint(ft, st)
                    bot.send_message(158079043, 'üïò ' + str(count+1) + '–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'+' —á–µ—Ä–µ–∑ ' + str("{:0>8}".format(str(timedelta(seconds=waiting)))))
                    time.sleep(waiting)
                else:
                    bot.send_message(id, '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –º–∞—Ä–∞—Ñ–æ–Ω, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!!! –ß—Ç–æ–±—ã —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ —Å–≤–µ—Ä—Ö—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö :)')
            else:
                bot.send_message(158079043, '‚ùï ' + str(count) + '–£–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª –º–∞—Ä–∞—Ñ–æ–Ω '+'id['+str(id)+']')
            db.close()
        else:
            bot.send_message(id, '–í—ã –ø—Ä–æ—Å–ø—É—Å—Ç–∏–ª–∏ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º –≤—ã—à–µ ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
            #time.sleep(5)
            # current_time = datetime.now()
            # target_time = current_time.replace(hour=20, minute=0, second=0, microsecond=0)
            # if current_time >= target_time:
            #   target_time += timedelta(days=1)
            # time_difference = target_time - current_time
            # seconds_until_9pm = int(time_difference.total_seconds())
            #print(seconds_until_9pm)
            
            ft = int((seconds_until_9pm - (seconds_until_9pm / 8))/len(id_arr))
            st = int(seconds_until_9pm / len(id_arr))
            waiting = (random.randint(ft, st))
            bot.send_message(158079043, 'üïò ' + str(count+1) + '–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'+' —á–µ—Ä–µ–∑ ' +  str("{:0>8}".format(str(timedelta(seconds=waiting)))))
            time.sleep(waiting)
      

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è  
@bot.callback_query_handler(func=lambda call: True)
def confirmation(call):
  id = call.from_user.id
  id = str(id)
  db = sqlite3.connect('db.sql')
  cur = db.cursor()
  cur.execute("SELECT wait FROM Users_links WHERE id_user = ?", (id,))
  wait = cur.fetchone()[0]

  krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
  current_time_krasnoyarsk = datetime.now(krasnoyarsk_tz)
  current_time_str = current_time_krasnoyarsk.strftime('%Y-%m-%d %H:%M:%S')
  cur.execute("SELECT successfully FROM Users_links WHERE id_user = ?", (id,))
  successfully_str = cur.fetchone()[0]
  successfully_str = successfully_str+' '+str(wait)+' '+'['+current_time_str+']'+' '+'|'
  cur.execute("UPDATE Users_links SET successfully = ? WHERE id_user = ?", (successfully_str, id))
  wait = ""
  cur.execute("UPDATE Users_links SET wait = ? WHERE id_user = ?", (wait, id))
  db.commit()
  
  cur.execute("SELECT stream FROM Users_links WHERE id_user = ?", (id,))
  result = cur.fetchone()
  result = result[0].split(" ")
      
  try:
    while True:
      result.remove("")
  except ValueError:
    pass

  if len(result)>0:
    bot.send_message(id, 'üëç –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ—Ç–∑—ã–≤—ã, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏.')
  else:
    bot.send_message(id, 'üéâüéâ –≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!')
  db.close()

# –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
def mult_threading(func):
  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
  @wraps(func)
  def wrapper(*args_, **kwargs_):
    import threading
    func_thread = threading.Thread(target=func,
                                   args=tuple(args_),
                                   kwargs=kwargs_)
    func_thread.start()
    return func_thread
  return wrapper


last_spam_time = None
lock = threading.Lock()


@mult_threading
def start_engine():
  global stop_flag
  stop_flag = False
  while not stop_flag:
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ –∏ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—É—â–∏–π —á–∞—Å
    tz = pytz.timezone('Asia/Krasnoyarsk')
    Krasnoyarsk_hour = datetime.now(tz).hour

    if 8 <= Krasnoyarsk_hour <= 19:
        bot.send_message(158079043, '‚ùóÔ∏è –°–ø–∞–º —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø—É—â–µ–Ω')
 
        spam()
        bot.send_message(158079043, '‚ùóÔ∏è –°–ø–∞–º —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–µ–Ω')

        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ
        current_time_krasnoyarsk = datetime.now(tz)

        # –í—ã—á–∏—Å–ª–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        next_day = current_time_krasnoyarsk.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
        sleep_time = next_day.strftime("%H:%M, %d %B")

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∞—Ç—å –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
        bot.send_message(158079043, 'üïò ' + f'–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∞—Ç—å –¥–æ {sleep_time}')

        # –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        time_to_wait = (next_day - current_time_krasnoyarsk).total_seconds()

        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        time.sleep(round(time_to_wait))
    else:
        if 0 <= Krasnoyarsk_hour < 8:
            # –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 9:00 —É—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            current_time_krasnoyarsk = datetime.now(tz)
            next_day = current_time_krasnoyarsk.replace(hour=9, minute=0, second=0, microsecond=0)
            sleep_time = next_day.strftime("%H:%M, %d %B")
            time_to_wait = (next_day - current_time_krasnoyarsk).total_seconds()

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 9:00 —É—Ç—Ä–∞, —Ç–æ –∂–¥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
            if time_to_wait > 0:
                # –û–∂–∏–¥–∞–µ–º –¥–æ 9:00 —É—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                bot.send_message(158079043, 'üïò ' + f'–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∞—Ç—å –¥–æ {sleep_time}')
                time.sleep(round(time_to_wait))
            # spam()
            
            
        else:
            current_time_krasnoyarsk = datetime.now(tz)
            next_day = current_time_krasnoyarsk.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
            sleep_time = next_day.strftime("%H:%M, %d %B")

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∞—Ç—å –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
            bot.send_message(158079043, 'üïò ' + f'–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–∞—Ç—å –¥–æ {sleep_time}')

            time_to_wait = (next_day - current_time_krasnoyarsk).total_seconds()
            time.sleep(round(time_to_wait))

"""–°–ü–ê–ú –§–£–ù–ö–¶–ò–Ø"""





if __name__ == '__main__':
  # bot.polling(none_stop=True, timeout=60)
  bot.infinity_polling(True)
